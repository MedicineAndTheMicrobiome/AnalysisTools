#!/usr/bin/env perl

###############################################################################

use strict;
use Getopt::Std;
use vars qw($opt_q $opt_f $opt_o);

getopts("q:f:o:");
my $usage = "usage: 
$0 
	-q <quality value>
	-f <input sequence fasta file>
	-o <output quality fasta file>

	Reads in the input sequence fasta file and generates a fake quality
	fasta file based on the quality value you specify.  The point of this
	is just in case you have a program that needs a qual file, but since
	the sequence wasn't generated by a sequencer, the info isn't available.

";

if(!(defined($opt_q)) || !(defined($opt_f)) || !(defined($opt_o))){
	die $usage;
}

###############################################################################

my $input_seq_fasta=$opt_f;
my $output_qual_fasta=$opt_o;
my $fake_quality_value=$opt_q;

###############################################################################

open(SEQ_FH, "<$input_seq_fasta") || die "Could not open $input_seq_fasta\n";
open(QUAL_FH, ">$output_qual_fasta") || die "Could not open $output_qual_fasta\n";

###############################################################################

print STDERR "Processing FASTA file...\n";

my ($defline, $prev_defline, $sequence);
while(<SEQ_FH>){
	chomp;
	
	if(/^>/){
		$defline=$_;
		if($sequence ne ""){
			process_record($prev_defline, $sequence);
			$sequence="";
		}
		$prev_defline=$defline;
	}else{
		$sequence.=$_;
	}
}
process_record($prev_defline, $sequence);

print STDERR "Completed.\n";

###############################################################################

sub process_record{
	my $defline = shift;
	my $sequence = shift;

	print QUAL_FH "$defline\n";

	my $seq_len=length($sequence);

	my $width=60;
	my $abs_cnt=0;
	while($abs_cnt<$seq_len){
		for(my $i=0; $i<$width && $abs_cnt<$seq_len; $i++){
			if($i>0){
				print QUAL_FH " ";
			}
			print QUAL_FH "$fake_quality_value";
			$abs_cnt++;
		}		
		print QUAL_FH "\n";
	}
}

#------------------------------------------------------------------------------
